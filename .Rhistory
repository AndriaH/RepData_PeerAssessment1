submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key = "sex_class", value = "count")
res <- gather(students2, sex_class, count, -grade)
res
?separate
separatec(data = res, col = sex_class, into = c("sex", "class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
reset()
submit()
students3
submit()
reset()
?spread
submit()
submit()
submit()
reset()
submit()
submit()
reset()
submit()
reset()
submit()
reset()
submit()
reset()
submit()
students3 %>%
gather(class , grade , class1:class5 , na.rm = TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class , grade ) %>%
print
students3 %>%
spread(class , grade ) %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
print
students3 %>%
##gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(class , grade ) %>%
print
students3 %>%
gather(class, grade, class1:class5, !na.rm = TRUE) %>%
spread(class , grade ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , grade ) %>%
print
submit()
extract_numeric("class5")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(1 = class1, 2 = class2, 3 = class3, 4 = class4, 5 = class5)
print
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1="1", class2="2", class3="3", class4="4", class5="5")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1=1, class2=2, class3=3, class4=4, class5=5)
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1=1, class2=2, class3=3, class4=4, class5=5)
print
?extract_numeric
submit()
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class, extract_numeric(class1:class5))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class, extract_numeric("class1:class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(extract_numeric(class,"class1:class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(extract_numeric("class1","class2","class3","class4","class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(extract_numeric("class1:class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class,extract_numeric("class1:class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate("1" = class1)
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1="1")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1="1")
extract_numeric("class1")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric("class1"))
extract_numeric("class1")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric("class1:class5"))
extract_numeric("class1")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric("class1:class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric("class1 class2 class3 class4 class5"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric("class"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class= extract_numeric(C(class)))
print
submit()
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here
mutate(class = extract_numeric(c(class))%>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here
mutate(class= extract_numeric(c(class))) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here
mutate(class= extract_numeric((class))) %>%
print
submit()
students4
student_info <- students4 %>%
select( id, name , sex ) %>%
print
submit()
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info$unique)  %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
student_info$unique  %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info)  %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info, incomparables != FALSE)  %>%
print
student_info <- students4 %>%
select(id$unique, name$unique, sex$unique) %>%
### Your code here %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
print(student_info$unique)
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(id,name,sex)        %>%
print
student_info
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info, incomparables = FALSE, ...)        %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info, incomparables = FALSE)        %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique(student_info, incomparables = TRUE)        %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique$student_info %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
student_info$unique %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here
unique %>%
print
submit()
gradebook <- students4 %>%
### Your code here
select(id, class, midterm, final) %>%
print
submit()
passed
failed
mutate(status = "passed")
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
?select
sat %>%
select(-contains("total")) %>%
gather(k = part_sex, value = count, -score_range) %>%
### <Your call to separate()>
separate(part_sex, into = c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by()>
group_by(part,sex) %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
Sys.getlocale("LC_TIME")
library(lubricate)
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
dmy("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(--"192012")
ymd("1-9-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(now(this_moment))
this_moment <- update()
this_moment <- update(this_moment, hms)
this_moment <- update(this_moment, hours = 10, minutes = 15, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34, seconds=0)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- update(depart, hours + 15, minutes + 50)
arrive <- update(depart, date-time + hours(15), date-time + minutes(50))
arrive <- update(depart, depart + hours(15), depart + minutes(50))
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
arrive <- with_tz(time, tzone ="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone ="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.periof(how_long)
as.period(how_long)
stopwatch()
q()
?data.table
library(data.table)
?data.table
?quantmod
library(quantmod)
load.packages(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
dir()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dateDownloaded <- date()
dateDownloaded
dir()
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dateDownloaded <- date()
dateDownloaded
dtGDP <- data.table(read.csv(f, skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm=TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited1 <- grep("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grep("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grep("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grep1("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grep("^United", dtGDP$Long.Name)
summary(isUnited)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dateDownloaded <- date()
dateDownloaded
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
dt[isFiscalYearEnd & isJune, Special.Notes]
isJune
library(quantmod) amzn = getSymbols("AMZN",auto.assign=FALSE) sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE) sampleTimes = index(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
dateDownloaded <- date()
dateDownloaded
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
ibrary(ggplot)
install.packages(gglot2)
install.packages(gglot)
install.packages(gglot)
install.package(gglot)
install.packages(gglot)
install.packages(ggplot)
q()
setwd("C:/Users/Andria/data/RepData_PeerAssessment1")
setwd("C:/Users/Andria/RepData_PeerAssessment1")
###### Author: Andria Hall
setwd("/Users/Andria/data/RepData_PeerAssessment1")
f <- file.path(getwd(), "activity.zip")
activity <- tbl_df(read.csv(unz(f, "activity.csv"),header= TRUE, sep= ","))
# explore activity data
head(select(activity, steps:interval))
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
suppressMessages(require("data.table"))
suppressMessages(require("dplyr"))
suppressMessages(require("tidyr"))
suppressMessages(require("ggplot2"))
suppressMessages(require("data.table"))
suppressMessages(require("dplyr"))
suppressMessages(require("tidyr"))
suppressMessages(require("ggplot2"))
setwd("/Users/Andria/RepData_PeerAssessment1")
f <- file.path(getwd(), "activity.zip")
activity <- tbl_df(read.csv(unz(f, "activity.csv"),header= TRUE, sep= ","))
head(select(activity, steps:interval))
?head
g <- ggplot(steps_taken, aes(x=steps)) +
geom_histogram(fill=heat.colors(1), col="black", binwidth=1000) +
labs(x = "Number of Steps per Day") +
labs(y = "Number of Times per Day") +
labs(title = "Histogram of Total Number of Steps Taken per Day") +
theme_bw()
print(g)
g <- ggplot(steps_taken, aes(x=steps)) +
geom_histogram(fill=heat.colors(1), col="black", binwidth=1000) +
labs(x = "Number of Steps per Day") +
labs(y = "Number of Times per Day") +
labs(title = "Histogram of Total Number of Steps Taken per Day") +
theme_bw()
steps_taken <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
head(steps_taken)
g <- ggplot(steps_taken, aes(x=steps)) +
geom_histogram(fill=heat.colors(1), col="black", binwidth=1000) +
labs(x = "Number of Steps per Day") +
labs(y = "Number of Times per Day") +
labs(title = "Histogram of Total Number of Steps Taken per Day") +
theme_bw()
print(g)
steps_taken %>% summarise(steps_mean= mean(steps), steps_median = median(steps))
?is.na
